/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package edu.ucla.macroscope.textlibrary.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.dao.orm.Session;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import edu.ucla.macroscope.textlibrary.model.MacroscopeDocument;
import edu.ucla.macroscope.textlibrary.model.MacroscopeDocumentContentBlobModel;
import edu.ucla.macroscope.textlibrary.service.MacroscopeDocumentLocalService;
import edu.ucla.macroscope.textlibrary.service.persistence.MacroscopeDocumentPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the macroscope document local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link edu.ucla.macroscope.textlibrary.service.impl.MacroscopeDocumentLocalServiceImpl}.
 * </p>
 *
 * @author dave
 * @see edu.ucla.macroscope.textlibrary.service.impl.MacroscopeDocumentLocalServiceImpl
 * @see edu.ucla.macroscope.textlibrary.service.MacroscopeDocumentLocalServiceUtil
 * @generated
 */
public abstract class MacroscopeDocumentLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements MacroscopeDocumentLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link edu.ucla.macroscope.textlibrary.service.MacroscopeDocumentLocalServiceUtil} to access the macroscope document local service.
	 */

	/**
	 * Adds the macroscope document to the database. Also notifies the appropriate model listeners.
	 *
	 * @param macroscopeDocument the macroscope document
	 * @return the macroscope document that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public MacroscopeDocument addMacroscopeDocument(
		MacroscopeDocument macroscopeDocument) throws SystemException {
		macroscopeDocument.setNew(true);

		return macroscopeDocumentPersistence.update(macroscopeDocument);
	}

	/**
	 * Creates a new macroscope document with the primary key. Does not add the macroscope document to the database.
	 *
	 * @param documentId the primary key for the new macroscope document
	 * @return the new macroscope document
	 */
	@Override
	public MacroscopeDocument createMacroscopeDocument(long documentId) {
		return macroscopeDocumentPersistence.create(documentId);
	}

	/**
	 * Deletes the macroscope document with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param documentId the primary key of the macroscope document
	 * @return the macroscope document that was removed
	 * @throws PortalException if a macroscope document with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public MacroscopeDocument deleteMacroscopeDocument(long documentId)
		throws PortalException, SystemException {
		return macroscopeDocumentPersistence.remove(documentId);
	}

	/**
	 * Deletes the macroscope document from the database. Also notifies the appropriate model listeners.
	 *
	 * @param macroscopeDocument the macroscope document
	 * @return the macroscope document that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public MacroscopeDocument deleteMacroscopeDocument(
		MacroscopeDocument macroscopeDocument) throws SystemException {
		return macroscopeDocumentPersistence.remove(macroscopeDocument);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(MacroscopeDocument.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return macroscopeDocumentPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link edu.ucla.macroscope.textlibrary.model.impl.MacroscopeDocumentModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return macroscopeDocumentPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link edu.ucla.macroscope.textlibrary.model.impl.MacroscopeDocumentModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return macroscopeDocumentPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return macroscopeDocumentPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return macroscopeDocumentPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public MacroscopeDocument fetchMacroscopeDocument(long documentId)
		throws SystemException {
		return macroscopeDocumentPersistence.fetchByPrimaryKey(documentId);
	}

	/**
	 * Returns the macroscope document with the primary key.
	 *
	 * @param documentId the primary key of the macroscope document
	 * @return the macroscope document
	 * @throws PortalException if a macroscope document with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public MacroscopeDocument getMacroscopeDocument(long documentId)
		throws PortalException, SystemException {
		return macroscopeDocumentPersistence.findByPrimaryKey(documentId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return macroscopeDocumentPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the macroscope documents.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link edu.ucla.macroscope.textlibrary.model.impl.MacroscopeDocumentModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of macroscope documents
	 * @param end the upper bound of the range of macroscope documents (not inclusive)
	 * @return the range of macroscope documents
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<MacroscopeDocument> getMacroscopeDocuments(int start, int end)
		throws SystemException {
		return macroscopeDocumentPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of macroscope documents.
	 *
	 * @return the number of macroscope documents
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getMacroscopeDocumentsCount() throws SystemException {
		return macroscopeDocumentPersistence.countAll();
	}

	/**
	 * Updates the macroscope document in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param macroscopeDocument the macroscope document
	 * @return the macroscope document that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public MacroscopeDocument updateMacroscopeDocument(
		MacroscopeDocument macroscopeDocument) throws SystemException {
		return macroscopeDocumentPersistence.update(macroscopeDocument);
	}

	@Override
	public MacroscopeDocumentContentBlobModel getContentBlobModel(
		Serializable primaryKey) throws SystemException {
		Session session = null;

		try {
			session = macroscopeDocumentPersistence.openSession();

			return (edu.ucla.macroscope.textlibrary.model.MacroscopeDocumentContentBlobModel)session.get(MacroscopeDocumentContentBlobModel.class,
				primaryKey);
		}
		catch (Exception e) {
			throw macroscopeDocumentPersistence.processException(e);
		}
		finally {
			macroscopeDocumentPersistence.closeSession(session);
		}
	}

	/**
	 * Returns the macroscope document local service.
	 *
	 * @return the macroscope document local service
	 */
	public edu.ucla.macroscope.textlibrary.service.MacroscopeDocumentLocalService getMacroscopeDocumentLocalService() {
		return macroscopeDocumentLocalService;
	}

	/**
	 * Sets the macroscope document local service.
	 *
	 * @param macroscopeDocumentLocalService the macroscope document local service
	 */
	public void setMacroscopeDocumentLocalService(
		edu.ucla.macroscope.textlibrary.service.MacroscopeDocumentLocalService macroscopeDocumentLocalService) {
		this.macroscopeDocumentLocalService = macroscopeDocumentLocalService;
	}

	/**
	 * Returns the macroscope document remote service.
	 *
	 * @return the macroscope document remote service
	 */
	public edu.ucla.macroscope.textlibrary.service.MacroscopeDocumentService getMacroscopeDocumentService() {
		return macroscopeDocumentService;
	}

	/**
	 * Sets the macroscope document remote service.
	 *
	 * @param macroscopeDocumentService the macroscope document remote service
	 */
	public void setMacroscopeDocumentService(
		edu.ucla.macroscope.textlibrary.service.MacroscopeDocumentService macroscopeDocumentService) {
		this.macroscopeDocumentService = macroscopeDocumentService;
	}

	/**
	 * Returns the macroscope document persistence.
	 *
	 * @return the macroscope document persistence
	 */
	public MacroscopeDocumentPersistence getMacroscopeDocumentPersistence() {
		return macroscopeDocumentPersistence;
	}

	/**
	 * Sets the macroscope document persistence.
	 *
	 * @param macroscopeDocumentPersistence the macroscope document persistence
	 */
	public void setMacroscopeDocumentPersistence(
		MacroscopeDocumentPersistence macroscopeDocumentPersistence) {
		this.macroscopeDocumentPersistence = macroscopeDocumentPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("edu.ucla.macroscope.textlibrary.model.MacroscopeDocument",
			macroscopeDocumentLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"edu.ucla.macroscope.textlibrary.model.MacroscopeDocument");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return MacroscopeDocument.class;
	}

	protected String getModelClassName() {
		return MacroscopeDocument.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = macroscopeDocumentPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = edu.ucla.macroscope.textlibrary.service.MacroscopeDocumentLocalService.class)
	protected edu.ucla.macroscope.textlibrary.service.MacroscopeDocumentLocalService macroscopeDocumentLocalService;
	@BeanReference(type = edu.ucla.macroscope.textlibrary.service.MacroscopeDocumentService.class)
	protected edu.ucla.macroscope.textlibrary.service.MacroscopeDocumentService macroscopeDocumentService;
	@BeanReference(type = MacroscopeDocumentPersistence.class)
	protected MacroscopeDocumentPersistence macroscopeDocumentPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private MacroscopeDocumentLocalServiceClpInvoker _clpInvoker = new MacroscopeDocumentLocalServiceClpInvoker();
}