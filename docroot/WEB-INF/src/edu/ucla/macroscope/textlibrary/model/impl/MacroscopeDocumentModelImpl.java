/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package edu.ucla.macroscope.textlibrary.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import edu.ucla.macroscope.textlibrary.model.MacroscopeDocument;
import edu.ucla.macroscope.textlibrary.model.MacroscopeDocumentContentBlobModel;
import edu.ucla.macroscope.textlibrary.model.MacroscopeDocumentModel;
import edu.ucla.macroscope.textlibrary.model.MacroscopeDocumentSoap;
import edu.ucla.macroscope.textlibrary.service.MacroscopeDocumentLocalServiceUtil;

import java.io.Serializable;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MacroscopeDocument service. Represents a row in the &quot;TL_MacroscopeDocument&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link edu.ucla.macroscope.textlibrary.model.MacroscopeDocumentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MacroscopeDocumentImpl}.
 * </p>
 *
 * @author dave
 * @see MacroscopeDocumentImpl
 * @see edu.ucla.macroscope.textlibrary.model.MacroscopeDocument
 * @see edu.ucla.macroscope.textlibrary.model.MacroscopeDocumentModel
 * @generated
 */
@JSON(strict = true)
public class MacroscopeDocumentModelImpl extends BaseModelImpl<MacroscopeDocument>
	implements MacroscopeDocumentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a macroscope document model instance should use the {@link edu.ucla.macroscope.textlibrary.model.MacroscopeDocument} interface instead.
	 */
	public static final String TABLE_NAME = "TL_MacroscopeDocument";
	public static final Object[][] TABLE_COLUMNS = {
			{ "documentId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "content", Types.BLOB },
			{ "title", Types.VARCHAR },
			{ "author", Types.VARCHAR },
			{ "collection", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table TL_MacroscopeDocument (documentId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,content BLOB,title VARCHAR(75) null,author VARCHAR(75) null,collection VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table TL_MacroscopeDocument";
	public static final String ORDER_BY_JPQL = " ORDER BY macroscopeDocument.documentId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY TL_MacroscopeDocument.documentId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.edu.ucla.macroscope.textlibrary.model.MacroscopeDocument"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.edu.ucla.macroscope.textlibrary.model.MacroscopeDocument"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.edu.ucla.macroscope.textlibrary.model.MacroscopeDocument"),
			true);
	public static long AUTHOR_COLUMN_BITMASK = 1L;
	public static long COLLECTION_COLUMN_BITMASK = 2L;
	public static long GROUPID_COLUMN_BITMASK = 4L;
	public static long TITLE_COLUMN_BITMASK = 8L;
	public static long DOCUMENTID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MacroscopeDocument toModel(MacroscopeDocumentSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MacroscopeDocument model = new MacroscopeDocumentImpl();

		model.setDocumentId(soapModel.getDocumentId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setContent(soapModel.getContent());
		model.setTitle(soapModel.getTitle());
		model.setAuthor(soapModel.getAuthor());
		model.setCollection(soapModel.getCollection());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MacroscopeDocument> toModels(
		MacroscopeDocumentSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MacroscopeDocument> models = new ArrayList<MacroscopeDocument>(soapModels.length);

		for (MacroscopeDocumentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.edu.ucla.macroscope.textlibrary.model.MacroscopeDocument"));

	public MacroscopeDocumentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _documentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDocumentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _documentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MacroscopeDocument.class;
	}

	@Override
	public String getModelClassName() {
		return MacroscopeDocument.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("documentId", getDocumentId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("content", getContent());
		attributes.put("title", getTitle());
		attributes.put("author", getAuthor());
		attributes.put("collection", getCollection());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long documentId = (Long)attributes.get("documentId");

		if (documentId != null) {
			setDocumentId(documentId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Blob content = (Blob)attributes.get("content");

		if (content != null) {
			setContent(content);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String author = (String)attributes.get("author");

		if (author != null) {
			setAuthor(author);
		}

		String collection = (String)attributes.get("collection");

		if (collection != null) {
			setCollection(collection);
		}
	}

	@JSON
	@Override
	public long getDocumentId() {
		return _documentId;
	}

	@Override
	public void setDocumentId(long documentId) {
		_documentId = documentId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Blob getContent() {
		if (_contentBlobModel == null) {
			try {
				_contentBlobModel = MacroscopeDocumentLocalServiceUtil.getContentBlobModel(getPrimaryKey());
			}
			catch (Exception e) {
			}
		}

		Blob blob = null;

		if (_contentBlobModel != null) {
			blob = _contentBlobModel.getContentBlob();
		}

		return blob;
	}

	@Override
	public void setContent(Blob content) {
		if (_contentBlobModel == null) {
			_contentBlobModel = new MacroscopeDocumentContentBlobModel(getPrimaryKey(),
					content);
		}
		else {
			_contentBlobModel.setContentBlob(content);
		}
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_columnBitmask |= TITLE_COLUMN_BITMASK;

		if (_originalTitle == null) {
			_originalTitle = _title;
		}

		_title = title;
	}

	public String getOriginalTitle() {
		return GetterUtil.getString(_originalTitle);
	}

	@JSON
	@Override
	public String getAuthor() {
		if (_author == null) {
			return StringPool.BLANK;
		}
		else {
			return _author;
		}
	}

	@Override
	public void setAuthor(String author) {
		_columnBitmask |= AUTHOR_COLUMN_BITMASK;

		if (_originalAuthor == null) {
			_originalAuthor = _author;
		}

		_author = author;
	}

	public String getOriginalAuthor() {
		return GetterUtil.getString(_originalAuthor);
	}

	@JSON
	@Override
	public String getCollection() {
		if (_collection == null) {
			return StringPool.BLANK;
		}
		else {
			return _collection;
		}
	}

	@Override
	public void setCollection(String collection) {
		_columnBitmask |= COLLECTION_COLUMN_BITMASK;

		if (_originalCollection == null) {
			_originalCollection = _collection;
		}

		_collection = collection;
	}

	public String getOriginalCollection() {
		return GetterUtil.getString(_originalCollection);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			MacroscopeDocument.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MacroscopeDocument toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MacroscopeDocument)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MacroscopeDocumentImpl macroscopeDocumentImpl = new MacroscopeDocumentImpl();

		macroscopeDocumentImpl.setDocumentId(getDocumentId());
		macroscopeDocumentImpl.setGroupId(getGroupId());
		macroscopeDocumentImpl.setCompanyId(getCompanyId());
		macroscopeDocumentImpl.setUserId(getUserId());
		macroscopeDocumentImpl.setUserName(getUserName());
		macroscopeDocumentImpl.setCreateDate(getCreateDate());
		macroscopeDocumentImpl.setModifiedDate(getModifiedDate());
		macroscopeDocumentImpl.setTitle(getTitle());
		macroscopeDocumentImpl.setAuthor(getAuthor());
		macroscopeDocumentImpl.setCollection(getCollection());

		macroscopeDocumentImpl.resetOriginalValues();

		return macroscopeDocumentImpl;
	}

	@Override
	public int compareTo(MacroscopeDocument macroscopeDocument) {
		long primaryKey = macroscopeDocument.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MacroscopeDocument)) {
			return false;
		}

		MacroscopeDocument macroscopeDocument = (MacroscopeDocument)obj;

		long primaryKey = macroscopeDocument.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		MacroscopeDocumentModelImpl macroscopeDocumentModelImpl = this;

		macroscopeDocumentModelImpl._originalGroupId = macroscopeDocumentModelImpl._groupId;

		macroscopeDocumentModelImpl._setOriginalGroupId = false;

		macroscopeDocumentModelImpl._contentBlobModel = null;

		macroscopeDocumentModelImpl._originalTitle = macroscopeDocumentModelImpl._title;

		macroscopeDocumentModelImpl._originalAuthor = macroscopeDocumentModelImpl._author;

		macroscopeDocumentModelImpl._originalCollection = macroscopeDocumentModelImpl._collection;

		macroscopeDocumentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MacroscopeDocument> toCacheModel() {
		MacroscopeDocumentCacheModel macroscopeDocumentCacheModel = new MacroscopeDocumentCacheModel();

		macroscopeDocumentCacheModel.documentId = getDocumentId();

		macroscopeDocumentCacheModel.groupId = getGroupId();

		macroscopeDocumentCacheModel.companyId = getCompanyId();

		macroscopeDocumentCacheModel.userId = getUserId();

		macroscopeDocumentCacheModel.userName = getUserName();

		String userName = macroscopeDocumentCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			macroscopeDocumentCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			macroscopeDocumentCacheModel.createDate = createDate.getTime();
		}
		else {
			macroscopeDocumentCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			macroscopeDocumentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			macroscopeDocumentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		macroscopeDocumentCacheModel.title = getTitle();

		String title = macroscopeDocumentCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			macroscopeDocumentCacheModel.title = null;
		}

		macroscopeDocumentCacheModel.author = getAuthor();

		String author = macroscopeDocumentCacheModel.author;

		if ((author != null) && (author.length() == 0)) {
			macroscopeDocumentCacheModel.author = null;
		}

		macroscopeDocumentCacheModel.collection = getCollection();

		String collection = macroscopeDocumentCacheModel.collection;

		if ((collection != null) && (collection.length() == 0)) {
			macroscopeDocumentCacheModel.collection = null;
		}

		return macroscopeDocumentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{documentId=");
		sb.append(getDocumentId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", author=");
		sb.append(getAuthor());
		sb.append(", collection=");
		sb.append(getCollection());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("edu.ucla.macroscope.textlibrary.model.MacroscopeDocument");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>documentId</column-name><column-value><![CDATA[");
		sb.append(getDocumentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>author</column-name><column-value><![CDATA[");
		sb.append(getAuthor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collection</column-name><column-value><![CDATA[");
		sb.append(getCollection());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MacroscopeDocument.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			MacroscopeDocument.class
		};
	private long _documentId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private MacroscopeDocumentContentBlobModel _contentBlobModel;
	private String _title;
	private String _originalTitle;
	private String _author;
	private String _originalAuthor;
	private String _collection;
	private String _originalCollection;
	private long _columnBitmask;
	private MacroscopeDocument _escapedModel;
}